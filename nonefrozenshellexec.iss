; Script generated by the Inno Setup Script Wizard.
; Inspired by https://gist.github.com/jakoch/33ac13800c17eddb2dd4

#define MyAppName "NoFroze"
#define MyAppVersion "1.5"
#define MyAppPublisher "miku.ltd"
#define MyAppURL "http://www.miku.ltd"
#define MyAppExeName "MyProg.exe"
#IFDEF UNICODE
  #DEFINE AW "W"
#ELSE
  #DEFINE AW "A"
#ENDIF
[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{85DD1901-5ECC-4E3D-B071-2A46FCEF1B5C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "C:\Program Files (x86)\Inno Setup 5\Examples\MyProg.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Code]

const
  WAIT_TIMEOUT = $00000102;
  SEE_MASK_NOCLOSEPROCESS = $00000040;
  SEE_MASK_FLAG_NO_UI= $00000400;
  INFINITE = $FFFFFFFF;     { Infinite timeout }
type
  TShellExecuteInfo = record
    cbSize: DWORD;
    fMask: Cardinal;
    Wnd: HWND;
    lpVerb: string;
    lpFile: string;
    lpParameters: string;
    lpDirectory: string;
    nShow: Integer;
    hInstApp: THandle;
    lpIDList: DWORD;
    lpClass: string;
    hkeyClass: THandle;
    dwHotKey: DWORD;
    hMonitor: THandle;
    hProcess: THandle;
  end;
function ShellExecuteEx(var lpExecInfo: TShellExecuteInfo): BOOL;
  external 'ShellExecuteEx{#AW}@shell32.dll stdcall';
function WaitForSingleObject(hHandle: THandle; dwMilliseconds: DWORD): DWORD;
  external 'WaitForSingleObject@kernel32.dll stdcall';
function CloseHandle(hObject: THandle): BOOL; external 'CloseHandle@kernel32.dll stdcall';
type
  TMsg = record
    hwnd: HWND;
    message: UINT;
    wParam: Longint;
    lParam: Longint;
    time: DWORD;
    pt: TPoint;
  end;
const
  PM_REMOVE = 1;
function PeekMessage(var lpMsg: TMsg; hWnd: HWND; wMsgFilterMin, wMsgFilterMax, wRemoveMsg: UINT): BOOL; external 'PeekMessageA@user32.dll stdcall';
function TranslateMessage(const lpMsg: TMsg): BOOL; external 'TranslateMessage@user32.dll stdcall';
function DispatchMessage(const lpMsg: TMsg): Longint; external 'DispatchMessageA@user32.dll stdcall';
procedure AppProcessMessage;
var
  Msg: TMsg;
begin
  while PeekMessage(Msg, WizardForm.Handle, 0, 0, PM_REMOVE) do begin
    TranslateMessage(Msg);
    DispatchMessage(Msg);
  end;
end;

procedure NoneFrozenShellExec(verb:String;file:String;param:String;path:String;show:Integer;wait:TExecWait;var res:Integer);
var
  ExecInfo: TShellExecuteInfo;
begin
  ExecInfo.cbSize := SizeOf(ExecInfo);
  ExecInfo.fMask := SEE_MASK_NOCLOSEPROCESS;  // if should hide the error msg box,or SEE_MASK_FLAG_NO_UI
  ExecInfo.lpVerb:= verb;
  ExecInfo.Wnd := 0;
  ExecInfo.lpFile := file;
  ExecInfo.lpParameters := param;
  ExecInfo.nShow := show;
  ExecInfo.lpDirectory:=path;
  if ShellExecuteEx(ExecInfo) then
  begin
    while WaitForSingleObject(ExecInfo.hProcess, 100) = WAIT_TIMEOUT do
    begin
        AppProcessMessage;
        WizardForm.Refresh();
    end;
    CloseHandle(ExecInfo.hProcess);
    res:=0;
  end
  else
  begin
    res:=DllGetLastError;
  end;
end;

procedure CurStepChanged(curStep:TSetupStep);
var
  installPath:String;
  res:Integer;
  ExecInfo: TShellExecuteInfo;
begin
  if curStep = ssPostInstall then
  begin 
    // change style of progress bar
    WizardForm.BorderIcons:=WizardForm.BorderIcons-[biSystemMenu];
    WizardForm.ProgressGauge.Style:=npbstMarquee;
    WizardForm.StatusLabel.Caption:='initializing and it may take minutes';
    // a ping delay use exec
    ShellExec('','pings','-n 1 127.0.0.1','',SW_HIDE,ewWaitUntilTerminated,res);
    MsgBox('result : '+IntToStr(res)+' error msg :'+SysErrorMessage(res), mbInformation, MB_OK);
    // a failed example
    NoneFrozenShellExec('','pings','-n 10 127.0.0.1','',SW_HIDE,ewWaitUntilTerminated,res);
    MsgBox('result : '+IntToStr(res)+' error msg :'+SysErrorMessage(res), mbInformation, MB_OK);
    // a success example  
    NoneFrozenShellExec('','cmd','/c echo 123>>1.txt','C:\',SW_HIDE,ewWaitUntilTerminated,res);
    MsgBox('result : '+IntToStr(res)+' error msg :'+SysErrorMessage(res), mbInformation, MB_OK);
  end;
  
end;
